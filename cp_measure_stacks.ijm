//This script measures the fluorescence intensity of cells over time from fluorescence imaging data.
//It uses the regions of interest defined in the previous macro to identify the location of cells

//The template file and fluorescence image stack should have the same file name structure when initially saved
//I use <date as YYMMDD>_<coverslip ID number>_<imaged region of coverslip ID number>_<recording type>
//For example, the fluorescence image stack would be "240630_c1_f1_fluorescence.tif" and the transmitted light image "240630_c1_f1_template.tif"


//define the path to a folder where analysed data output will be stored (might be worth creating a new one)
output_folder = "C:\\Users\\dw2471\\OneDrive - cumc.columbia.edu\\temp\\fiji_analysis_output\\"

//Chose the folder containing the ROI locations zip file and other files generated by 'define_rois.ijm' previously
template_directory=getDirectory("Choose a ROI directory");

//chose a folder containing the  fluorescence image files
time_series_directory=getDirectory("Choose a fluoresence image directory");

//Creates an array of all the template image files
//(in this example it is just one template image)

FileList = getFileList(template_directory);
Array.print(FileList);
template_file_list = newArray(0);
for (i=0; i<FileList.length; i++){
	if ((matches(FileList[i], ".*template.tif"))){
		template_file_list = Array.concat(template_file_list, FileList[i]); 
	print("template  files");
	print(FileList[i]);
	}
}
Array.sort(template_file_list);

i=0;



//Loops through each of the template files 
for (i=0; i<template_file_list.length; i++){
	
	print(template_file_list[i]);
	print("****");
	open(template_directory+template_file_list[i]);
	print("****");
	CurrentImageFilenameNoExt = File.nameWithoutExtension;
	
	//Imaging/experiment info is embedded in the metadata of the template image copy that is created when 'define_rois.ijm' is run. 
	//To access the metadata, it was easier to first extract and save all the metadata from the template image copy as a text file,
	//and and then parse the text file to extract the values needed. 
	run("Show Info...");
	selectWindow("Info for "+template_file_list[i]);	
	saveAs("Text", output_folder+"TempImageText.txt");
	metadatastring = File.openAsString(output_folder+"TempImageText.txt");
	lines= split(metadatastring,"\"");
	Array.print(lines);
	LineID = lines[4];
	objtype = lines[2];
	dye = lines[0];
	print(LineID);
	print(objtype);
	print(dye);
	run("Close");
	close();
	roiManager("reset");
		
	//Opens the ROIs from the ROI locations zip file created with 'define_rois.ijm'	
	run("ROI Manager...");
	print(template_directory+CurrentImageFilenameNoExt+"_ROIs.zip");	
	print("********************************1******************************************");
	roiManager("Open",template_directory+CurrentImageFilenameNoExt+"_ROIs.zip");	
	print("********************************2******************************************");
	
	numROIs = roiManager("count");	
	for(j=0; j<numROIs; j++){	
		roiManager("select", j); 
		roiManager("Remove Slice Info");
	}
	
	//Matching the fluorescence image stack to the ROI location file is based on the matching the initial parts of both file names
	//This uses the first three components of the file name to for matching
	//e.g. it will match a template file "240630_c1_f1_xxx" with a fluorescence image stack file "240630_c1_f1_y"
	Full_string = CurrentImageFilenameNoExt;
	print("full string "+ Full_string);
	
	//Match everything in the file name before the 4th underscore 
	Character_for_matching = "_";
	Match_before_number_of_occurences = 3;
	Character_occurence_position = indexOf(Full_string, Character_for_matching);
	j=0;
	for(j=1;j<Match_before_number_of_occurences;j++){
		Character_occurence_position  = indexOf(Full_string, Character_for_matching, Character_occurence_position+1);
		print(Character_occurence_position);
		}
	Substring_of_interest=substring(Full_string, 0, Character_occurence_position);
	
	//Creates an array for storing the fluorescence image stack names (only one here)
	SponFileList = newArray(0);
	time_series_list = newArray(0);
	time_series_list = getFileList(time_series_directory);	

	//This loops through the names of the fluorescence image files
	//If there is match between the first three parts of the time series file name and first three substrings
	//the template file, the fluorescence image stack name is added to the array 
	k=0;
	for (k=0; k<time_series_list.length; k++){		
		if (startsWith(time_series_list[k],Substring_of_interest)){
			print("MATCHES");
			SponFileList = Array.concat(SponFileList, time_series_list[k]);
			print(time_series_list[k]);
		}
	}


	//The roi manager is loaded with the ROIs from 'define_rois.ijm'
	Array.print(SponFileList);
	roi_no = roiManager("count"); 
	init_roi_no = roiManager("count");
	index1=0;
	setBatchMode(true);
	
	//This scales the image so the dimension are converted from pixel to micrometers. 
	//It is calculated from a known pixel size determined previously by taking an image of a micrometer at 40x	
	for (index1=0; index1<SponFileList.length; index1++){
		open(time_series_directory+SponFileList[index1]);
		if (objtype =="40x"){
	      run("Set Scale...", "distance=2160 known=410 pixel=1 unit=um");
	   } else {
	      run("Set Scale...", "distance=2160 known=820 pixel=1 unit=um");
	   }	
	
		FileSaveName =  File.nameWithoutExtension; 
		NumberPoints = (nSlices);
		
	//This loop creates the time points column in the results table, using the functions shown below 
		for (k=0; k<NumberPoints; k++) {
			ImageNo = ImageNumber(k+1);
			ImageTime = TimeInSecs(k+1);
			
			//If the the image is the first frame ,  it is set time as zero		
			if	(k==0){
				TimeatStart=ImageTime;
			}	
			TimeSinceStart = ImageTime-TimeatStart;
			setResult(FileSaveName+":"+LineID+":Image Number", k, ImageNo);
			setResult(FileSaveName+":"+LineID+":Time (s)", k, TimeSinceStart); 
			updateResults();
	
			//Calculation of the mean intensity of the ROIs		
			for (j=0; j<roi_no; j++){
				paddedROI = IJ.pad(j+1,3);
				roiManager("select", j); 
				getStatistics(area,mean); 
				setResult(FileSaveName+":"+LineID+":ROI:"+paddedROI, k, mean); 
			}
		}
	}
	
	//saves the  data		
	saveAs("Results",output_folder+FileSaveName+"_analysis.txt");
	//close();
	run("Clear Results");
}

setBatchMode(false);

table1 = "Results";
Table.create(table1);

roi_no = roiManager("count"); 
init_roi_no = roiManager("count");

//ROIs are renamed and saved
for (j=0; j<init_roi_no; j++){ 
	roiManager("select", j);
	x_coord = getValue("X");
	y_coord = getValue("Y");
	Table.set("ROI", j, j+1);
    Table.set("X", j, x_coord);
     Table.set("Y", j, y_coord);

}

Table.update;

//Two functions which calculate the image number and time stamp from a group of binary pixels in the top left of the area
function ImageNumber(SliceNum){
setSlice(SliceNum);

//Calc Image number 10^6
makeRectangle(0, 0, 1, 1);         
getStatistics(area, mean);
ImageTenESix = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16))));

//Calc Image number 10^4
makeRectangle(1, 0, 1, 1);         
getStatistics(area, mean);
ImageTenEFour = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16))));

//Calc Image number 10^2
makeRectangle(2, 0, 1, 1);         
getStatistics(area, mean);
ImageTenETwo = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16))));

//Calc Image number 10^1
makeRectangle(3, 0, 1, 1);         
getStatistics(area, mean);
ImageTen = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16))));
ImageNumber1 = ((ImageTen+(ImageTenETwo*100)+(ImageTenEFour*10000)+(ImageTenESix*1000000)));
return ImageNumber1;
}

//Calculate Time
function TimeInSecs(SliceNum){
setSlice(SliceNum);

//Calculate day
makeRectangle(7, 0, 1, 1);         
getStatistics(area, mean);
day = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16))));

//Calculate hour
makeRectangle(8, 0, 1, 1);         
getStatistics(area, mean);
hr = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16))));

//Calculate mins
makeRectangle(9, 0, 1, 1);         
getStatistics(area, mean);
min = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16)))); 

//Calculate secs
makeRectangle(10, 0, 1, 1);         
getStatistics(area, mean);
sec = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16)))); 

//Calculate microsecs^4
makeRectangle(11, 0, 1, 1);
getStatistics(area, mean);
microsecEFour = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16)))); 

//Calculate microsecs^2
makeRectangle(12, 0, 1, 1);         
getStatistics(area, mean);
microsecETwo = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16)))); 

//Calculate microsecs
makeRectangle(13, 0, 1, 1);         
getStatistics(area, mean);
microsec = ((floor(mean/16))*10)+((mean-((floor(mean/16)*16)))); 

TimeInSec = ((day*24*60*60)+(hr*60*60)+(min*60)+(sec))+((microsec+(microsecETwo*100)+(microsecEFour*10000))/1000000); 
return TimeInSec;
}




